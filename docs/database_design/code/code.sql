-- MySQL Script generated by MySQL Workbench
-- 11/27/15 21:33:31
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema quizapp
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `quizapp` ;

-- -----------------------------------------------------
-- Schema quizapp
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `quizapp` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `quizapp` ;

-- -----------------------------------------------------
-- Table `quizapp`.`AccessLevels`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quizapp`.`AccessLevels` ;

CREATE TABLE IF NOT EXISTS `quizapp`.`AccessLevels` (
  `id` INT(1) NOT NULL AUTO_INCREMENT COMMENT 'Auto increment access level id',
  `name` VARCHAR(20) NOT NULL COMMENT 'Access level name',
  `updated` TIMESTAMP NOT NULL COMMENT 'Access level updated time.',
  PRIMARY KEY (`id`)  COMMENT '')
ENGINE = InnoDB;

CREATE UNIQUE INDEX `name_UNIQUE` ON `quizapp`.`AccessLevels` (`name` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `quizapp`.`Users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quizapp`.`Users` ;

CREATE TABLE IF NOT EXISTS `quizapp`.`Users` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Auto increment user id',
  `email` VARCHAR(50) NOT NULL COMMENT 'User email address. used as username',
  `password` VARCHAR(255) NOT NULL COMMENT 'User password.Used for the login system.',
  `access` INT(1) NOT NULL COMMENT 'Access level id (Access:id)',
  `name` VARCHAR(40) NOT NULL COMMENT 'The real name from a user',
  `surname` VARCHAR(40) NOT NULL COMMENT 'The real surname from a user',
  `gender` INT(1) NOT NULL COMMENT '',
  `country` VARCHAR(40) NOT NULL COMMENT 'Country name where the user lives.Can be null',
  `city` VARCHAR(40) NOT NULL COMMENT 'City name where the user lives.Can be null',
  `address` VARCHAR(50) NOT NULL COMMENT 'Home address from a user.Can be null',
  `phone` VARCHAR(15) NULL COMMENT 'The phone number from a user.Can be null',
  `last_login` TIMESTAMP NOT NULL COMMENT 'Last login date from the user.',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `access_level_id`
    FOREIGN KEY (`access`)
    REFERENCES `quizapp`.`AccessLevels` (`id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `email_UNIQUE` ON `quizapp`.`Users` (`email` ASC)  COMMENT '';

CREATE INDEX `alvl_idx` ON `quizapp`.`Users` (`access` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `quizapp`.`Questionaires`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quizapp`.`Questionaires` ;

CREATE TABLE IF NOT EXISTS `quizapp`.`Questionaires` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Auto increment questionaire id',
  `creatorid` INT NOT NULL COMMENT 'Author id(Users:id)',
  `name` VARCHAR(255) NOT NULL COMMENT 'Questionaire name',
  `description` VARCHAR(255) NOT NULL COMMENT 'Questionaire description',
  `language` VARCHAR(40) NOT NULL COMMENT 'Questionaire language',
  `accepted` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'If questionaire accepted from one admin',
  `updated` TIMESTAMP NOT NULL COMMENT 'Questionaire last updated time.',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `questionaire_creator_user_id`
    FOREIGN KEY (`creatorid`)
    REFERENCES `quizapp`.`Users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `uid_idx` ON `quizapp`.`Questionaires` (`creatorid` ASC)  COMMENT '';

CREATE UNIQUE INDEX `name_UNIQUE` ON `quizapp`.`Questionaires` (`name` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `quizapp`.`QuestionGroups`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quizapp`.`QuestionGroups` ;

CREATE TABLE IF NOT EXISTS `quizapp`.`QuestionGroups` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Auto increment category id',
  `qid` INT NOT NULL COMMENT 'Quastionaires id (Quastionaires:id)',
  `name` VARCHAR(50) NOT NULL COMMENT 'Category name',
  `description` VARCHAR(255) NULL COMMENT 'Category description text. Can be null',
  `altitude` VARCHAR(11) NOT NULL COMMENT '',
  `longitude` VARCHAR(11) NOT NULL COMMENT '',
  `deviationA` VARCHAR(11) NOT NULL COMMENT 'Deviation altitude from location altitude',
  `deviationL` VARCHAR(11) NOT NULL COMMENT 'Deviation longitude from location longitude ',
  `updated` TIMESTAMP NOT NULL COMMENT 'Category last updated time.',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `questionGroup_questionaire_id`
    FOREIGN KEY (`qid`)
    REFERENCES `quizapp`.`Questionaires` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `name_UNIQUE` ON `quizapp`.`QuestionGroups` (`name` ASC)  COMMENT '';

CREATE INDEX `qid_idx` ON `quizapp`.`QuestionGroups` (`qid` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `quizapp`.`Questions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quizapp`.`Questions` ;

CREATE TABLE IF NOT EXISTS `quizapp`.`Questions` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Auto increment question id',
  `gid` INT NOT NULL COMMENT 'QuestionGroups id (QuestionGroups:id)',
  `question` VARCHAR(255) NOT NULL COMMENT 'Question name',
  `time_to_answer` INT NOT NULL COMMENT 'Time for a user to answer one question',
  `updated` TIMESTAMP NOT NULL COMMENT 'Question last updated time.',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `QuestionGroup_id_for_this_question`
    FOREIGN KEY (`gid`)
    REFERENCES `quizapp`.`QuestionGroups` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `cid_idx` ON `quizapp`.`Questions` (`gid` ASC)  COMMENT '';

CREATE UNIQUE INDEX `question_UNIQUE` ON `quizapp`.`Questions` (`question` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `quizapp`.`Answers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quizapp`.`Answers` ;

CREATE TABLE IF NOT EXISTS `quizapp`.`Answers` (
  `id` INT NOT NULL AUTO_INCREMENT COMMENT 'Auto increment id',
  `qid` INT NOT NULL COMMENT 'Question id (Questions:id)',
  `answer` VARCHAR(50) NOT NULL COMMENT 'Answer name',
  `description` VARCHAR(255) NULL COMMENT 'Answer description',
  `isCorrect` TINYINT(1) NOT NULL COMMENT 'if this answer is the correct for the question id',
  `updated` TIMESTAMP NOT NULL COMMENT 'when answer created',
  PRIMARY KEY (`id`)  COMMENT '',
  CONSTRAINT `question_for_this_answer`
    FOREIGN KEY (`qid`)
    REFERENCES `quizapp`.`Questions` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `qid_idx` ON `quizapp`.`Answers` (`qid` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `quizapp`.`UserAnswers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quizapp`.`UserAnswers` ;

CREATE TABLE IF NOT EXISTS `quizapp`.`UserAnswers` (
  `uid` INT NOT NULL COMMENT 'User id (Users:id)',
  `aid` INT NOT NULL COMMENT 'Answer id (Answers:id)',
  `altitude` VARCHAR(10) NOT NULL COMMENT 'user altitude when he answer the question',
  `longitude` VARCHAR(10) NOT NULL COMMENT 'user longitude he answer the question',
  `answered_time` TIMESTAMP NOT NULL COMMENT 'When the question answered',
  CONSTRAINT `User_who_answer_this_question`
    FOREIGN KEY (`uid`)
    REFERENCES `quizapp`.`Users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `answer_which_answered`
    FOREIGN KEY (`aid`)
    REFERENCES `quizapp`.`Answers` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `uid_idx` ON `quizapp`.`UserAnswers` (`uid` ASC)  COMMENT '';

CREATE INDEX `aid_idx` ON `quizapp`.`UserAnswers` (`aid` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `quizapp`.`UserReports`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quizapp`.`UserReports` ;

CREATE TABLE IF NOT EXISTS `quizapp`.`UserReports` (
  `uid` INT NOT NULL COMMENT 'user id (Users:id)',
  `quid` INT NOT NULL COMMENT 'Questionaires id (Questionaires:id)',
  `comment` VARCHAR(255) NOT NULL COMMENT 'Report comment from a user for a question id',
  `report_date` TIMESTAMP NOT NULL COMMENT 'Report date time',
  PRIMARY KEY (`uid`)  COMMENT '',
  CONSTRAINT `user_who_send_the_report`
    FOREIGN KEY (`uid`)
    REFERENCES `quizapp`.`Users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `questionaire_reported`
    FOREIGN KEY (`quid`)
    REFERENCES `quizapp`.`Questionaires` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `uid_idx` ON `quizapp`.`UserReports` (`uid` ASC)  COMMENT '';

CREATE INDEX `qid_idx` ON `quizapp`.`UserReports` (`quid` ASC)  COMMENT '';


-- -----------------------------------------------------
-- Table `quizapp`.`have_access`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `quizapp`.`have_access` ;

CREATE TABLE IF NOT EXISTS `quizapp`.`have_access` (
  `uid` INT NOT NULL COMMENT 'User id(Users:id)',
  `qid` INT NOT NULL COMMENT 'Question id(Questions:id)',
  `accepted` TINYINT(1) NOT NULL DEFAULT 0 COMMENT 'if request is accepted\n',
  `comment` VARCHAR(255) NULL COMMENT '',
  `request_time` TIMESTAMP NOT NULL COMMENT '',
  CONSTRAINT `user_access_request`
    FOREIGN KEY (`uid`)
    REFERENCES `quizapp`.`Users` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `questionaire_id_for_access`
    FOREIGN KEY (`qid`)
    REFERENCES `quizapp`.`Questionaires` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

CREATE INDEX `uid_idx` ON `quizapp`.`have_access` (`uid` ASC)  COMMENT '';

CREATE INDEX `qid_idx` ON `quizapp`.`have_access` (`qid` ASC)  COMMENT '';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
